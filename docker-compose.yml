version: "3.8"

# DEPLOYMENT NOTES FOR PORTAINER:
# 1. Upload all necessary files (docker-compose.yml and mariadb-config.cnf) to Portainer
# 2. Set environment variables DB_PASSWORD and DB_ROOT_PASSWORD when deploying through Portainer UI
# 3. No local shell scripts are required - this is a fully self-contained stack

services:
  db:
    image: mariadb:10.5
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '1'
          memory: 1G
      labels:
        com.librenms.service: "database"
        com.librenms.description: "MariaDB database for LibreNMS"
    environment:
      MYSQL_DATABASE: librenms
      MYSQL_USER: librenms
      MYSQL_PASSWORD: ${DB_PASSWORD:-librenms_password}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-librenms_root_password}
      # Use internal MariaDB secure-file-priv setting instead of command line
    volumes:
      - db-data:/var/lib/mysql
    configs:
      - source: mariadb_config_v4
        target: /etc/mysql/conf.d/custom.cnf
    networks:
      - librenms
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No command override - using config file instead

  redis:
    image: redis:6.2-alpine
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      labels:
        com.librenms.service: "cache"
        com.librenms.description: "Redis cache for LibreNMS"
    networks:
      - librenms
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - SYS_RESOURCE
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  librenms:
    image: librenms/librenms:23.11.0
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '2'
          memory: 2G
      labels:
        com.librenms.service: "application"
        com.librenms.description: "LibreNMS network monitoring system"
    environment:
      DB_HOST: db
      DB_NAME: librenms
      DB_USER: librenms
      DB_PASSWORD: ${DB_PASSWORD:-librenms_password}
      REDIS_HOST: redis
      # Required timezone, adjust as needed
      TZ: ${TZ:-UTC}
      # Adjust this to your actual domain or IP
      BASE_URL: ${BASE_URL:-http://localhost}
      ENABLE_DISTRIBUTED_POLLING: "true"
      # Store RRD data in the database for better compatibility
      DB_RRD: "true"
    volumes:
      - librenms-data:/data
    # Wait for database to be ready
    depends_on:
      - db
      - redis
      - memcached
    entrypoint: ["/bin/sh", "-c", "until mysqladmin ping -h db --silent; do sleep 5; done; /init"]
    ports:
      - "${WEB_PORT:-8080}:8000"
    networks:
      - librenms
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  memcached:
    image: memcached:alpine
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      labels:
        com.librenms.service: "cache"
        com.librenms.description: "Memcached for LibreNMS"
    networks:
      - librenms
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - SYS_RESOURCE
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11211"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Self-contained backup service that doesn't require external scripts
  backup:
    image: alpine:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
      labels:
        com.librenms.service: "backup"
        com.librenms.description: "Backup service for LibreNMS"
    volumes:
      - db-data:/source/db:ro
      - librenms-data:/source/librenms:ro
      - backup-volume:/backup
    networks:
      - librenms
    # Install required tools and set up backup automation
    command: >
      sh -c "apk add --no-cache mariadb-client tzdata &&
             mkdir -p /backup/db /backup/librenms &&
             echo '0 2 * * * /bin/sh -c \"mysqldump -h db -u librenms -p${DB_PASSWORD} --single-transaction --quick --lock-tables=false librenms | gzip > /backup/db/librenms_db_\$$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql.gz && find /backup/db -name \"librenms_db_*.sql.gz\" -type f -mtime +7 -delete\"' > /var/spool/cron/crontabs/root &&
             echo '0 3 * * * /bin/sh -c \"tar -czf /backup/librenms/librenms_app_\$$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).tar.gz -C /source/librenms . && find /backup/librenms -name \"librenms_app_*.tar.gz\" -type f -mtime +7 -delete\"' >> /var/spool/cron/crontabs/root &&
             chmod 600 /var/spool/cron/crontabs/root &&
             crond -f -d 8"
    environment:
      - DB_PASSWORD=${DB_PASSWORD:-librenms_password}

# Persistent storage
volumes:
  db-data:
    driver: local
  librenms-data:
    driver: local
  backup-volume:
    driver: local

networks:
  librenms:
    driver: overlay
    attachable: true

# Config files referenced from external files
configs:
  mariadb_config_v4:
    file: ./mariadb-config.cnf
    name: librenms_mariadb_config_v4